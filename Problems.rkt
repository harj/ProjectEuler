#lang racket/load
;(require trace)

#| Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
|#

(define (divisible n d)
  (= 0 (remainder n d)))

(define (multiple-3-5 n)
  (or (divisible n 3)
      (divisible n 5)))

(define (sum-natural limit)
  (define (itr-sum result next)
    (cond ((>= next limit)
           result)
          ((multiple-3-5 next)
           (itr-sum (+ result next) (+ next 1)))
          (else (itr-sum result (+ next 1)))))
  (itr-sum 0 1))

#| Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
|#

(define (fib n)
  (define (fib-itr n-1 n count)
    (if (= count 0)
        n
        (fib-itr n (+ n-1 n) (- count 1))))
  (if (<= n 2)
      n
      (fib-itr 0 1 n)))

(define (fib-seq limit)
  (define (fib-list n)
      (if (> (fib n) limit)
          '()
          (cond ((even? (fib n))
                 (cons (fib n) (fib-list (+ n 1))))
                (else (fib-list (+ n 1))))))
  (fib-list 1))

(define (sum-list list)
  (define (sum-itr list sum)
    (if (null? list)
        sum
        (sum-itr (cdr list) (+ (car list) sum))))
  (sum-itr list 0))

(define (even-fib-sum limit)
  (sum-list (fib-seq limit)))

#| Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
|#

; Divide n by 2.
  ;If it divides, check if result is prime.
   ;If result is prime then return it
   ;If not prime, divide it by 2.
  ;If it doesn't divide, divide by the next prime

(define (divides? n divisor)
  (= 0 (remainder n divisor)))

(define (second-factor n divisor)
  (/ n divisor))

(define (largest-factor n)
  (define (factor-itr n test)
    (if (divides? n test)
        (second-factor n test)
        (factor-itr n (+ test 1))))
  (factor-itr n 2))

(define (prime? n)
  (if (= n 1)
      false
      (= (largest-factor n) 1)))

(define (largest-prime-factor n)
  (define (prime-factor-itr n test)
          (if (and (divides? n test) (prime? (second-factor n test)))
              (second-factor n test)
              (prime-factor-itr n (+ test 1))))
  (if (prime? n)
      n
      (prime-factor-itr n 2)))

#| Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
|#

(define (reversed-number-to-list n)
  (if (< n 10)
      (list n)
      (cons (remainder n 10)
            (reversed-number-to-list (quotient n 10)))))

(define (reverse-list l)
  (define (iter list reversed)
    (if (null? list)
      reversed
      (iter (cdr list) (cons (car list) reversed))))
  (iter l '()))

(define (palindrome? n)
  (equal? (reversed-number-to-list n) (reverse-list (reversed-number-to-list n))))

;Evaluate (largest-palindrome 100 1000) for the answer
(define (largest-palindrome a b)
  (let* ((range1 (range a b))
         (range2 (range a b))
         (products (apply append
                          (map (lambda (x)
                                 (map (lambda (y)
                                        (* x y))
                                      range2))
                               range1))))
    (define (largest-pali ab result)
      (cond ((null? ab)
             result)
            ((and (> (car ab) result)
                  (palindrome? (car ab)))
             (largest-pali (cdr ab) (car ab)))
            (else
             (largest-pali (cdr ab) result))))
    (largest-pali products 0)))

#| Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
|#

(define (divide-by-all-numbers number range)
  (if (null? range)
      true
      (cond ((divides? number (car range))
             (divide-by-all-numbers number (cdr range)))
            (else
             false))))

(define (smallest-number test)
  (let ((numbers '(11 13 14 16 17 18 19 20)))
    (if (divide-by-all-numbers test numbers)
        test
        (smallest-number (+ test 20)))))

#| Problem 6
The sum of the squares of the first ten natural numbers is 385.
The square of the sum of the first ten natural numbers is 3025.

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
|#

(define (square x) (* x x))

(define (sum-squares range)
  (apply
   +
   (map (lambda (x)
          (square x))
        range)))

(define (square-sum range)
  (square
   (apply + range)))

(define (diff-sumsquares-squaresum range)
  (- (square-sum range) (sum-squares range)))

#| Problem 7
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?
|#

;Start with 2, check if next number is a prime, if YES then increment counter by 1 and check next, if NO then check next
;When counter = 10001, return number

(define (nth-prime n)
  (define (iter count number prime)
    (if (>= count n)
        prime
        (cond ((prime? number)
               (iter (+ count 1) (+ number 1) number))
              (else
               (iter count (+ number 1) prime)))))
  (iter 0 0 0))
              

    
  



