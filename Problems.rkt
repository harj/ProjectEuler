#lang racket/load
;(require trace)

#| Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
|#

(define (divisible n d)
  (= 0 (remainder n d)))

(define (multiple-3-5 n)
  (or (divisible n 3)
      (divisible n 5)))

(define (sum-natural limit)
  (define (itr-sum result next)
    (cond ((>= next limit)
           result)
          ((multiple-3-5 next)
           (itr-sum (+ result next) (+ next 1)))
          (else (itr-sum result (+ next 1)))))
  (itr-sum 0 1))

#| Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
|#

(define (fib n)
  (define (fib-itr n-1 n count)
    (if (= count 0)
        n
        (fib-itr n (+ n-1 n) (- count 1))))
  (if (<= n 2)
      n
      (fib-itr 0 1 n)))

(define (fib-seq limit)
  (define (fib-list n)
      (if (> (fib n) limit)
          '()
          (cond ((even? (fib n))
                 (cons (fib n) (fib-list (+ n 1))))
                (else (fib-list (+ n 1))))))
  (fib-list 1))

(define (sum-list list)
  (define (sum-itr list sum)
    (if (null? list)
        sum
        (sum-itr (cdr list) (+ (car list) sum))))
  (sum-itr list 0))

(define (even-fib-sum limit)
  (sum-list (fib-seq limit)))

#| Problem 3
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?
|#

; Divide n by 2.
  ;If it divides, check if result is prime.
   ;If result is prime then return it
   ;If not prime, divide it by 2.
  ;If it doesn't divide, divide by the next prime

(define (divides? n divisor)
  (= 0 (remainder n divisor)))

(define (second-factor n divisor)
  (/ n divisor))

(define (largest-factor n)
  (define (factor-itr n test)
    (if (divides? n test)
        (second-factor n test)
        (factor-itr n (+ test 1))))
  (factor-itr n 2))

(define (prime? n)
  (= (largest-factor n) 1))

(define (largest-prime-factor n)
  (define (prime-factor-itr n test)
          (if (and (divides? n test) (prime? (second-factor n test)))
              (second-factor n test)
              (prime-factor-itr n (+ test 1))))
  (if (prime? n)
      n
      (prime-factor-itr n 2)))

#| Problem 4
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.

Find the largest palindrome made from the product of two 3-digit numbers.
|#

;Return digits of number in a list

(define (strip-last-digit n)
  (if (< n 10)
      n
      (- (/ n 10) (/ (remainder n 10) 10))))

(define (reversed-number-to-list n)
  (if (= (strip-last-digit n) n)
      (list n)
      (cons (remainder n 10) (reversed-number-to-list (strip-last-digit n)))))


(define (reverse-list l)
  (define (iter list reversed)
    (if (null? list)
      reversed
      (iter (cdr list) (cons (car list) reversed))))
  (iter l '()))

(define (palindrome? n)
  (equal? (reversed-number-to-list n) (reverse-list (reversed-number-to-list n))))

;Set a=100 b=1000
(define (largest-palindrome a b)
  (let* ((range1 (range a b))
         (range2 (range a b))
         (products (apply append
                          (map (lambda (x)
                                 (map (lambda (y)
                                        (* x y))
                                      range2))
                               range1))))
    (define (largest-pali list result)
      (cond ((null? list) result)
            ((and (palindrome? (car list)) (> (car list) result))
             (largest-pali (cdr list) (car list)))
            (else (largest-pali (cdr list) result))))
    (largest-pali products 0)))
    


